{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../task-communication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class TaskFormComponent {\n  constructor(taskCommunicationService, router) {\n    this.taskCommunicationService = taskCommunicationService;\n    this.router = router;\n    this.newTask = {\n      id: 0,\n      title: '',\n      description: '',\n      dueDate: new Date(),\n      completed: false\n    }; // Initialize a new Task instance\n  } // Inject the service\n  onSubmit(form) {\n    if (form.valid) {\n      // Call the addTask method of the service\n      this.router.navigate(['/']);\n      this.taskCommunicationService.addTask(this.newTask);\n      // Clear the form after submission\n      this.newTask = {\n        id: 0,\n        title: '',\n        description: '',\n        dueDate: new Date(),\n        completed: false\n      }; // Initialize a new Task instance\n      form.resetForm();\n    }\n  }\n}\n_class = TaskFormComponent;\n_class.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.TaskCommunicationService), i0.ɵɵdirectiveInject(i2.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-task-form\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[1, \"form-container\"], [3, \"ngSubmit\"], [\"taskForm\", \"ngForm\"], [\"for\", \"title\"], [\"type\", \"text\", \"id\", \"title\", \"name\", \"title\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"description\"], [\"id\", \"description\", \"name\", \"description\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Add Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1, 2);\n      i0.ɵɵlistener(\"ngSubmit\", function TaskFormComponent_Template_form_ngSubmit_3_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(4);\n        return i0.ɵɵresetView(ctx.onSubmit(_r0));\n      });\n      i0.ɵɵelementStart(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function TaskFormComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.newTask.title = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"label\", 5);\n      i0.ɵɵtext(9, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"textarea\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function TaskFormComponent_Template_textarea_ngModelChange_10_listener($event) {\n        return ctx.newTask.description = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 7);\n      i0.ɵɵtext(12, \"Add Task\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.newTask.title);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newTask.description);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"\\n\\n.form-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    height: 100vh;\\n  \\n  }\\n  \\n  .form-container[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n    font-size: 24px;\\n    color: #2e2e5f;\\n    font-weight: bolder;\\n    margin-bottom: 20px;\\n  }\\n  \\n  .form-container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%] {\\n    background-color: white;\\n    padding: 20px;\\n    border-radius: 8px;\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    width: 300px;\\n  }\\n  \\n  .form-container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n    display: block;\\n    margin-bottom: 8px;\\n    font-weight: bold;\\n  }\\n  \\n  .form-container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   input[type=\\\"text\\\"][_ngcontent-%COMP%], .form-container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%] {\\n    width: 100%;\\n    padding: 10px;\\n    border: 1px solid #ccc;\\n    border-radius: 4px;\\n    margin-bottom: 16px;\\n  }\\n  \\n  .form-container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n    background-color: #2e2e5f;\\n    color: white;\\n    border: none;\\n    padding: 10px 20px;\\n    border-radius: 4px;\\n    cursor: pointer;\\n    transition: background-color 0.3s ease;\\n  }\\n  \\n  .form-container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\\n    background-color: #0f87e6;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQ29tcG9uZW50cy90YXNrLWZvcm0vdGFzay1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBQzlCO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGFBQWE7O0VBRWY7O0VBRUE7SUFDRSxlQUFlO0lBQ2YsY0FBYztJQUNkLG1CQUFtQjtJQUNuQixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSx1QkFBdUI7SUFDdkIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQix3Q0FBd0M7SUFDeEMsWUFBWTtFQUNkOztFQUVBO0lBQ0UsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixpQkFBaUI7RUFDbkI7O0VBRUE7O0lBRUUsV0FBVztJQUNYLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHNDQUFzQztFQUN4Qzs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEluIGFkZC10YXNrLmNvbXBvbmVudC5jc3MgKi9cclxuLmZvcm0tY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgaGVpZ2h0OiAxMDB2aDtcclxuICBcclxuICB9XHJcbiAgXHJcbiAgLmZvcm0tY29udGFpbmVyIGgxIHtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGNvbG9yOiAjMmUyZTVmO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtLWNvbnRhaW5lciBmb3JtIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgICB3aWR0aDogMzAwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtLWNvbnRhaW5lciBmb3JtIGxhYmVsIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtLWNvbnRhaW5lciBmb3JtIGlucHV0W3R5cGU9XCJ0ZXh0XCJdLFxyXG4gIC5mb3JtLWNvbnRhaW5lciBmb3JtIHRleHRhcmVhIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNnB4O1xyXG4gIH1cclxuICBcclxuICAuZm9ybS1jb250YWluZXIgZm9ybSBidXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJlMmU1ZjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcyBlYXNlO1xyXG4gIH1cclxuICBcclxuICAuZm9ybS1jb250YWluZXIgZm9ybSBidXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBmODdlNjtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["TaskFormComponent","constructor","taskCommunicationService","router","newTask","id","title","description","dueDate","Date","completed","onSubmit","form","valid","navigate","addTask","resetForm","i0","ɵɵdirectiveInject","i1","TaskCommunicationService","i2","Router","selectors","decls","vars","consts","template","TaskFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TaskFormComponent_Template_form_ngSubmit_3_listener","ɵɵrestoreView","_r1","_r0","ɵɵreference","ɵɵresetView","TaskFormComponent_Template_input_ngModelChange_7_listener","$event","TaskFormComponent_Template_textarea_ngModelChange_10_listener","ɵɵadvance","ɵɵproperty"],"sources":["E:\\Ameena\\Project_2\\todo\\src\\app\\Components\\task-form\\task-form.component.ts","E:\\Ameena\\Project_2\\todo\\src\\app\\Components\\task-form\\task-form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Task } from '../../models/task.model'; // Import the Task model\nimport { Router} from '@angular/router';\nimport { TaskCommunicationService } from '../../task-communication.service'; // Import the TaskCommunicationService\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css']\n})\nexport class TaskFormComponent {\n\n  newTask: Task = { id: 0, title: '', description: '', dueDate: new Date(), completed: false };// Initialize a new Task instance\n \n  constructor(private taskCommunicationService: TaskCommunicationService, private router: Router) {} // Inject the service\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      // Call the addTask method of the service\n      this.router.navigate(['/']);\n      \n      this.taskCommunicationService.addTask(this.newTask);\n\n      // Clear the form after submission\n      this.newTask ={ id: 0, title: '', description: '', dueDate: new Date(), completed: false };// Initialize a new Task instance\n     \n      form.resetForm();\n    }\n  }\n}\n","<!-- In add-task.component.html -->\n<div class=\"form-container\">\n  <h1>Add Task</h1>\n  <form (ngSubmit)=\"onSubmit(taskForm)\" #taskForm=\"ngForm\">\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" [(ngModel)]=\"newTask.title\" name=\"title\">\n  \n    <label for=\"description\">Description</label>\n    <textarea id=\"description\" [(ngModel)]=\"newTask.description\" name=\"description\"></textarea>\n  \n    <!-- Add more form controls as needed -->\n  \n    <button type=\"submit\">Add Task</button>\n  </form>\n</div>\n"],"mappings":";;;;;AAWA,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,wBAAkD,EAAUC,MAAc;IAA1E,KAAAD,wBAAwB,GAAxBA,wBAAwB;IAAoC,KAAAC,MAAM,GAANA,MAAM;IAFtF,KAAAC,OAAO,GAAS;MAAEC,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,WAAW,EAAE,EAAE;MAAEC,OAAO,EAAE,IAAIC,IAAI,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAE,CAAC;EAEI,CAAC,CAAC;EAEnGC,QAAQA,CAACC,IAAY;IACnB,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd;MACA,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAE3B,IAAI,CAACZ,wBAAwB,CAACa,OAAO,CAAC,IAAI,CAACX,OAAO,CAAC;MAEnD;MACA,IAAI,CAACA,OAAO,GAAE;QAAEC,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,WAAW,EAAE,EAAE;QAAEC,OAAO,EAAE,IAAIC,IAAI,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAE,CAAC;MAE3FE,IAAI,CAACI,SAAS,EAAE;;EAEpB;;SAlBWhB,iBAAiB;;mBAAjBA,MAAiB,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,wBAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;QAAjBtB,MAAiB;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;MCV9BZ,EAAA,CAAAc,cAAA,aAA4B;MACtBd,EAAA,CAAAe,MAAA,eAAQ;MAAAf,EAAA,CAAAgB,YAAA,EAAK;MACjBhB,EAAA,CAAAc,cAAA,iBAAyD;MAAnDd,EAAA,CAAAiB,UAAA,sBAAAC,oDAAA;QAAAlB,EAAA,CAAAmB,aAAA,CAAAC,GAAA;QAAA,MAAAC,GAAA,GAAArB,EAAA,CAAAsB,WAAA;QAAA,OAAYtB,EAAA,CAAAuB,WAAA,CAAAV,GAAA,CAAAnB,QAAA,CAAA2B,GAAA,CAAkB;MAAA,EAAC;MACnCrB,EAAA,CAAAc,cAAA,eAAmB;MAAAd,EAAA,CAAAe,MAAA,YAAK;MAAAf,EAAA,CAAAgB,YAAA,EAAQ;MAChChB,EAAA,CAAAc,cAAA,eAAuE;MAAzCd,EAAA,CAAAiB,UAAA,2BAAAO,0DAAAC,MAAA;QAAA,OAAAZ,GAAA,CAAA1B,OAAA,CAAAE,KAAA,GAAAoC,MAAA;MAAA,EAA2B;MAAzDzB,EAAA,CAAAgB,YAAA,EAAuE;MAEvEhB,EAAA,CAAAc,cAAA,eAAyB;MAAAd,EAAA,CAAAe,MAAA,kBAAW;MAAAf,EAAA,CAAAgB,YAAA,EAAQ;MAC5ChB,EAAA,CAAAc,cAAA,mBAAgF;MAArDd,EAAA,CAAAiB,UAAA,2BAAAS,8DAAAD,MAAA;QAAA,OAAAZ,GAAA,CAAA1B,OAAA,CAAAG,WAAA,GAAAmC,MAAA;MAAA,EAAiC;MAAoBzB,EAAA,CAAAgB,YAAA,EAAW;MAI3FhB,EAAA,CAAAc,cAAA,iBAAsB;MAAAd,EAAA,CAAAe,MAAA,gBAAQ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;;;MAPThB,EAAA,CAAA2B,SAAA,GAA2B;MAA3B3B,EAAA,CAAA4B,UAAA,YAAAf,GAAA,CAAA1B,OAAA,CAAAE,KAAA,CAA2B;MAG9BW,EAAA,CAAA2B,SAAA,GAAiC;MAAjC3B,EAAA,CAAA4B,UAAA,YAAAf,GAAA,CAAA1B,OAAA,CAAAG,WAAA,CAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}